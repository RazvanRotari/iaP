swagger: "2.0"
info:
  description:
    iAP API Extern
  version: "1.0.0"
  title: iAP API Extern
  
host: razvanrotari.me:3030 
basePath: /v1
schemes:
  - http
paths:
  /articles:
    get:
      tags:
        - article
      summary: Get articles
      description: Get articles.
      operationId: getArticles
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
       - name: pageSize
         in: query
         description: Number of articles returned
         type: integer
      responses:
        200:
          description: A list of articles.
          schema:
            $ref: "#/definitions/Article"
    post:
      tags:
        - article
      summary: Add a new article to the database
      operationId: addArticle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Article object that needs to be added to the database
          required: false
          schema:
            $ref: "#/definitions/Article"
      responses:
        "404":
          description: Article not found
        "201":
          description: successful post operation
          schema:
            $ref: "#/definitions/Article"
        "400":
          description: Invalid input
    put:
      tags:
        - article
      summary: Update an existing article
      description: ""
      operationId: updateArticle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Article object that needs to be updated in the database
          required: false
          schema:
            $ref: "#/definitions/Article"
      responses:
        "200":
          description: A list of articles.
          schema:
            $ref: "#/definitions/Article"
        "404":
          description: Article not found
        "400":
          description: Invalid ID supplied
  
  /articles/{articleId}:
    get:
      tags:
        - article
      summary: Find article by ID
      description: Returns article with the id mentioned in url.
      operationId: getArticleById
      produces:
        - application/json
      parameters:
        - in: path
          name: articleId
          description: ID of article that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Article not found
        "200":
          description: successful get operation
          schema:
            $ref: "#/definitions/Article"
        "400":
          description: Invalid ID supplied
      
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: successful create operation
          schema:
            $ref: "#/definitions/User"
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: Log in
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: false
          type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          type: string
      responses:
        "200":
          description: successful login operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
      responses:
        "200":
          description: successful logout operation
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        "200":
          description: successful get operation
          schema:
            $ref: "#/definitions/User"
        "401":
          description: Not authentificated
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Successful update operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid body request
        "401":
          description: Not authentificated
        "404":
          description: User not found

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "401":
          description: Not authentificated
        "404":
          description: User not found

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Article:
    type: object
    required:
      - title
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: "#/definitions/Category"
      title:
        type: string
        example: NewsTest
      language:
        type: string
        example: romanian