swagger: "2.0"
info:
  description:
    iAP API Extern
  version: "1.0.0"
  title: iAP API Extern
  
host: razvanrotari.me:3030 
basePath: /v1
schemes:
  - http
paths:
  /search:
    post:
      tags:
        - search
      summary: Filter for medias
      description: You can search through the list of medias using this endpoint. You will have to make a post request with an array of querry objects. These query objects contain the name of the field from media object, the type of query (EQ = equal, LS = less, GR = greater) and the value.
        The format for date is "MMMM d, yyyy".
      operationId: search
      produces:
        - application/json
      parameters:
        - in: body
          name: filter
          description: list of query objects
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Query"
      responses:
        "200":
          description: A list of medias that respect the conditions from request body
          schema:
            type: array
            items:
              $ref: "#/definitions/Media"
        "400":
          description: Invalid body / type should be EQ, LS or GR !
          schema: 
            $ref: "#/definitions/Error"
  /media:
    get:
      tags:
        - media
      summary: Get Media
      description: Get a list of all medias
      operationId: getMedia
      responses:
        "200":
          description: A list of medias.
          schema:
            $ref: "#/definitions/Medias"
    post:
      tags:
        - media
      summary: Create media
      description: Create a media. (The format for date is "MMMM d, yyyy".)
      operationId: createMedia
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created media object
          required: true
          schema:
            type: object
            properties:
              category:
                  $ref: "#/definitions/Category"
              title:
                type: string
              description:
                type: string
              url:
                type: string
              language:
                type: string
              date:
                type: string
                format: date-time
              externalURL:
                type: string
              authorRating:
                type: integer
              mediaRating:
                type: integer
      responses:
        "201":
          description: Successful create operation
          schema:
            $ref: "#/definitions/Media"
        "400":
          description: Invalid body
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: Media already exists
          schema: 
            $ref: "#/definitions/Error"
  /media/{id}:
    get:
      tags:
        - media
      summary: Find media by ID
      description: Returns media with the id mentioned in url.
      operationId: getNews
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: Id of the media
          required: true
          type: integer
      responses:
        "404":
          description: Media not found
        "200":
          description: successful get operation
          schema:
            $ref: "#/definitions/Media"
    put:
      tags:
        - media
      summary: Update media
      description: Update a media object. (The format for date is "MMMM d, yyyy".)
      operationId: updateMedia
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The id of the media to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated media object
          required: true
          schema:
            $ref: "#/definitions/UpdateMedia"
      responses:
        "200":
          description: Successful update operation
          schema:
            $ref: "#/definitions/Media"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "404":
          description: Media not found
          schema: 
            $ref: "#/definitions/Error"
    delete:
      tags:
        - media
      summary: Delete Media
      description: Delete a Media.
      operationId: deleteMedia
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The id of the media to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: Media not found
          schema: 
            $ref: "#/definitions/Error"
      
  /categories:
    get:
      tags:
        - category
      summary: Get list of categories
      description: Get list of categories.
      operationId: getCategories
      produces:
        - application/json
      responses:
        "200":
          description: Successful get operation
          schema:
            $ref: "#/definitions/Categories"
    post:
      tags:
        - category
      summary: Create category
      description: Create category
      operationId: createCategory
      produces:
        - application/json
      responses:
        "201":
          description: Successful post operation
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: Category already exists
          schema: 
            $ref: "#/definitions/Error"
  /categories/{name}:
    delete:
      tags:
        - category
      summary: Delete category
      description: Delete a category.
      operationId: deleteCategory
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: The name of the category that needs to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
  /users:
    get:
      tags:
        - user
      summary: Get list of users
      description: Get list of users.
      operationId: getUsers
      produces:
        - application/json
      responses:
        "200":
          description: Successful get operation
          schema:
            $ref: "#/definitions/Users"
    post:
      tags:
        - user
      summary: Create user
      description: Create an user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        "201":
          description: Successful create operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid body
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: Account already exists
          schema: 
            $ref: "#/definitions/Error"
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        "200":
          description: successful get operation
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: Update user
      description: Update user info.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: "#/definitions/UpdateUser"
      responses:
        "200":
          description: Successful update operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete an user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
  /authors:
    get:
      tags:
        - author
      summary: Get list of authors
      description: Get list of authors.
      operationId: getAuthors
      produces:
        - application/json
      responses:
        "200":
          description: Successful get operation
          schema:
            $ref: "#/definitions/Authors"
    post:
      tags:
        - author
      summary: Create author
      description: Create an author.
      operationId: createAuthor
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created author object
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              rating:
                type: integer
      responses:
        "201":
          description: Successful create operation
          schema:
            $ref: "#/definitions/Author"
        "400":
          description: Invalid body
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: Author already exists
          schema: 
            $ref: "#/definitions/Error"
  /authors/{name}:
    get:
      tags:
        - author
      summary: Get author by name
      description: ""
      operationId: getAuthor
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        "200":
          description: Successful get operation
          schema:
            $ref: "#/definitions/Author"
        "404":
          description: Author not found
          schema: 
            $ref: "#/definitions/Error"
    put:
      tags:
        - author
      summary: Update author
      description: Update author rating
      operationId: updateAuthor
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated author object
          required: true
          schema:
            $ref: "#/definitions/UpdateAuthor"
      responses:
        "200":
          description: Successful update operation
          schema:
            $ref: "#/definitions/Author"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "404":
          description: Author not found
          schema: 
            $ref: "#/definitions/Error"
    delete:
      tags:
        - author
      summary: Delete author
      description: Delete an author.
      operationId: deleteAuthor
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: Author not found
          schema: 
            $ref: "#/definitions/Error"
            
definitions:

  Query:
    type: object
    properties:
      field:
        type: string
      type:
        type: string
      value:
        type: string
  Author:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      rating:
        type: integer
  Authors:
    type: object
    properties:
      authors:
        type: array
        items:
          $ref: "#/definitions/Author"
  UpdateAuthor:
    type: object
    properties:
      rating:
        type: integer
  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
  Users:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: "#/definitions/User"
  UpdateUser:
    type: object
    properties:
      username:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
  Categories:
    type: object
    properties:
      categories:
        type: array
        items:
          $ref: "#/definitions/Category"
  Category:
    type: object
    properties:
      name:
        type: string
  Media:
    type: object
    properties:
      id:
        type: integer
      category:
        $ref: "#/definitions/Category"
      title:
        type: string
      language:
        type: string
      description:
        type: string
      url:
        type: string
      date:
        type: string
        format: date-time
      externalURL:
        type: string
      authorRating:
        type: integer
      mediaRating:
        type: integer
  Medias:
    type: object
    properties:
      media:
        type: array
        items:
          $ref: "#/definitions/Media"
  UpdateMedia:
    type: object
    properties:
      id:
        type: integer
      category:
        $ref: "#/definitions/Category"
      title:
        type: string
      language:
        type: string
      description:
        type: string
      url:
        type: string
      date:
        type: string
        format: date-time
      externalURL:
        type: string
      authorRating:
        type: integer
      mediaRating:
        type: integer
  Error:
    type: object
    properties:
      errorCode:
        type: string
      message: 
        type: string