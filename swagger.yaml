swagger: "2.0"
info:
  description:
    iAP API Extern
  version: "1.0.0"
  title: iAP API Extern
  
host: razvanrotari.me:3030 
basePath: /v1
schemes:
  - http
paths:
  /news:
    get:
      tags:
        - news
      summary: Get news
      description: Get a list of all news
      operationId: getNews
      responses:
        "200":
          description: A list of news.
          schema:
            $ref: "#/definitions/NewsList"
    post:
      tags:
        - news
      summary: Create news
      description: Create a news.
      operationId: createNews
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created news object
          required: true
          schema:
            type: object
            properties:
              category:
                  $ref: "#/definitions/Category"
              title:
                type: string
              description:
                type: string
              language:
                type: string
              date:
                type: string
              externalURL:
                type: string
      responses:
        "201":
          description: Successful create operation
          schema:
            $ref: "#/definitions/News"
        "400":
          description: Invalid body
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: News already exists
          schema: 
            $ref: "#/definitions/Error"
  /news/{id}:
    get:
      tags:
        - news
      summary: Find news by ID
      description: Returns news with the id mentioned in url.
      operationId: getNewsById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: Id of the news
          required: true
          type: integer
      responses:
        "404":
          description: News not found
        "200":
          description: successful get operation
          schema:
            $ref: "#/definitions/News"
    put:
      tags:
        - news
      summary: Update news
      description: Update a news object.
      operationId: updateNews
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The id of the news to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated news object
          required: true
          schema:
            $ref: "#/definitions/UpdateNews"
      responses:
        "200":
          description: Successful update operation
          schema:
            $ref: "#/definitions/News"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "404":
          description: News not found
          schema: 
            $ref: "#/definitions/Error"
    delete:
      tags:
        - news
      summary: Delete news
      description: Delete a news.
      operationId: deleteNews
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: The id of the news to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
      
  /categories:
    get:
      tags:
        - category
      summary: Get list of categories
      description: Get list of categories.
      operationId: getCategories
      produces:
        - application/json
      responses:
        "200":
          description: Successful get operation
          schema:
            $ref: "#/definitions/Categories"
    post:
      tags:
        - category
      summary: Create category
      description: Create category
      operationId: createCategory
      produces:
        - application/json
      responses:
        "201":
          description: Successful post operation
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: Category already exists
          schema: 
            $ref: "#/definitions/Error"
  /categories/{name}:
    delete:
      tags:
        - category
      summary: Delete category
      description: Delete a category.
      operationId: deleteCategory
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: The name of the category that needs to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
  /users:
    get:
      tags:
        - user
      summary: Get list of users
      description: Get list of users.
      operationId: getUsers
      produces:
        - application/json
      responses:
        "200":
          description: Successful get operation
          schema:
            $ref: "#/definitions/Users"
    post:
      tags:
        - user
      summary: Create user
      description: Create a user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        "201":
          description: Successful create operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid body
          schema: 
            $ref: "#/definitions/Error"
        "409":
          description: Account already exists
          schema: 
            $ref: "#/definitions/Error"
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        "200":
          description: successful get operation
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: "#/definitions/UpdateUser"
      responses:
        "200":
          description: Successful update operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Bad argument
          schema: 
            $ref: "#/definitions/Error"
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete a user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "204":
          description: Successful delete operation
        "404":
          description: User not found
          schema: 
            $ref: "#/definitions/Error"
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
  Users:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: "#/definitions/User"
  UpdateUser:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
  Categories:
    type: object
    properties:
      categories:
        type: array
        items:
          $ref: "#/definitions/Category"
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  News:
    type: object
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: "#/definitions/Category"
      title:
        type: string
        example: NewsTest
      language:
        type: string
        example: romanian
      description:
        type: string
        example: Short description of a story
      image:
        type: string
        example: image url
      date:
        type: string
        format: date-time
      externalURL:
        type: string
  NewsList:
    type: object
    properties:
      news:
        type: array
        items:
          $ref: "#/definitions/News"
  UpdateNews:
    type: object
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: "#/definitions/Category"
      title:
        type: string
        example: NewsTest
      language:
        type: string
        example: romanian
      description:
        type: string
        example: Short description of a story
      image:
        type: string
        example: image url
      date:
        type: string
        format: date-time
      externalURL:
        type: string
  Error:
    type: object
    properties:
      errorCode:
        type: string
      message: 
        type: string